// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace fwk.security.identity.core
{
    public partial class SecurityModelContext : DbContext
    {
        public SecurityModelContext()
        {
        }
        string connectionString;
        public SecurityModelContext(string connectionString) : base(GetOptions(connectionString))
        {
         

            this.connectionString = connectionString;
        }
        private static DbContextOptions GetOptions(string connectionString)
        {
            return SqlServerDbContextOptionsExtensions.UseSqlServer(new DbContextOptionsBuilder(), connectionString).Options;
        }
        public SecurityModelContext(DbContextOptions<SecurityModelContext> options)
            : base(options)
        {
        }

        public virtual DbSet<SecurityClients> SecurityClients { get; set; }
        public virtual DbSet<SecurityRefreshTokens> SecurityRefreshTokens { get; set; }
        public virtual DbSet<SecurityRoles> SecurityRoles { get; set; }
        public virtual DbSet<SecurityRolesInRules> SecurityRolesInRules { get; set; }
        public virtual DbSet<SecurityRules> SecurityRules { get; set; }
        public virtual DbSet<SecurityRulesCategory> SecurityRulesCategory { get; set; }
        public virtual DbSet<SecurityRulesInCategory> SecurityRulesInCategory { get; set; }
        public virtual DbSet<SecurityUserClaims> SecurityUserClaims { get; set; }
        public virtual DbSet<SecurityUserRoles> SecurityUserRoles { get; set; }
        public virtual DbSet<SecurityUsers> SecurityUsers { get; set; }
        public virtual DbSet<SecuritytUserLogins> SecuritytUserLogins { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SecurityClients>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.AllowedOrigin).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Secret).IsRequired();
            });

            modelBuilder.Entity<SecurityRefreshTokens>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExpiresUtc).HasColumnType("datetime");

                entity.Property(e => e.IssuedUtc).HasColumnType("datetime");

                entity.Property(e => e.ProtectedTicket).IsRequired();

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SecurityRoles>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<SecurityRolesInRules>(entity =>
            {
                entity.HasKey(e => new { e.RolId, e.RuleId });

                entity.HasOne(d => d.Rol)
                    .WithMany(p => p.SecurityRolesInRules)
                    .HasForeignKey(d => d.RolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityRolesInRules_SecurityRoles");

                entity.HasOne(d => d.Rule)
                    .WithMany(p => p.SecurityRolesInRules)
                    .HasForeignKey(d => d.RuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityRolesInRules_SecurityRules");
            });

            modelBuilder.Entity<SecurityRules>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SecurityRulesCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.Property(e => e.CategoryId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SecurityRulesInCategory>(entity =>
            {
                entity.HasKey(e => new { e.CategoryId, e.RuleId });

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.SecurityRulesInCategory)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityRulesInCategory_SecurityRulesCategory");

                entity.HasOne(d => d.Rule)
                    .WithMany(p => p.SecurityRulesInCategory)
                    .HasForeignKey(d => d.RuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityRulesInCategory_SecurityRules");
            });

            modelBuilder.Entity<SecurityUserClaims>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecurityUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityUserClaims_SecurityUsers");
            });

            modelBuilder.Entity<SecurityUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.SecurityUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityUserRoles_SecurityRoles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecurityUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityUserRoles_SecurityUsers");
            });

            modelBuilder.Entity<SecurityUsers>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FailedPasswordAttemptCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsLockedOut).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastLogInDate).HasColumnType("datetime");

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<SecuritytUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.SecuritytUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecuritytUserLogins_SecurityUsers");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}